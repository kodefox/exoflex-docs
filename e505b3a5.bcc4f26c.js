(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{238:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var o=n(1),r=n(8),a=(n(0),n(250)),i={id:"theming",title:"Theming"},s={id:"theming",title:"Theming",description:"## Customizing The Theme",source:"@site/docs/theming.md",permalink:"/exoflex/docs/theming",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/theming.md",sidebar:"someSidebar",previous:{title:"Installation",permalink:"/exoflex/docs/installation"},next:{title:"Contributing",permalink:"/exoflex/docs/contributing"}},l=[{value:"Customizing The Theme",id:"customizing-the-theme",children:[]},{value:"Custom Fonts",id:"custom-fonts",children:[]},{value:"Loading the fonts",id:"loading-the-fonts",children:[{value:"Using Expo",id:"using-expo",children:[]},{value:"Using Bare React Native (Without Expo)",id:"using-bare-react-native-without-expo",children:[]}]},{value:"Using the custom fonts",id:"using-the-custom-fonts",children:[{value:"Preset &amp; Weight",id:"preset--weight",children:[]},{value:"FontStyle",id:"fontstyle",children:[]}]}],c={rightToc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"customizing-the-theme"},"Customizing The Theme"),Object(a.b)("p",null,"To customize the theme used by exoflex, simply pass a custom theme to the provider:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{4-7,11}","{4-7,11}":!0}),"import { Provider } from 'exoflex';\n\nlet customTheme = {\n  // Notice you don't have to spread the default theme here.\n  colors: {\n    primary: 'salmon'\n  },\n}\n\n// The custom theme passed to `theme` prop will be automatically merged with the default theme.\n<Provider theme={customTheme}>\n  <View>\n    <Text>Foo</Text>\n  </View>\n</Provider>\n")),Object(a.b)("h2",{id:"custom-fonts"},"Custom Fonts"),Object(a.b)("p",null,"By default, exoflex will use the system fonts, but exoflex is designed with Rubik font family in mind, so exoflex also ship with Rubik fonts."),Object(a.b)("p",null,"Before using the custom fonts in the theme, make sure to load the fonts first."),Object(a.b)("h2",{id:"loading-the-fonts"},"Loading the fonts"),Object(a.b)("p",null,"How you load the fonts will vary depending on the platform and stack you're using."),Object(a.b)("h3",{id:"using-expo"},"Using Expo"),Object(a.b)("p",null,"When using Expo, you can let exoflex handle the font loading for you."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{6-17}","{6-17}":!0}),"import { Provider } from 'exoflex';\nimport OpenSansRegular from './OpenSans-Regular.ttf';\n\n// Define the font family to use in the custom theme.\nlet customTheme = {\n  fonts: {\n    default: {\n      // Here, we only override the 'normal' font weight from the 'default' preset.\n      normal: {\n        // When using the font, refer to the font by the name.\n        // E.g. fontFamily: 'OpenSans-Regular' because the name is 'OpenSans-Regular'\n        name: 'OpenSans-Regular',\n        weight: '400',\n        source: OpenSansRegular\n      }\n    }\n  }\n}\n\n// When loading the fonts, Provider will render a placeholder.\n// To override it, pass a component to render to `Provider.LoadingPlaceholder`.\n<Provider theme={customTheme}>\n  <View>\n    {/* This text will be using the OpenSans font family. */}\n    <Text>Foo</Text>\n\n    {/*\n      But this one will use the default font\n      because we only override the normal one in the custom theme.\n    */}\n    <Text weight=\"medium\">Bar</Text>\n  </View>\n</Provider>\n")),Object(a.b)("p",null,"You can skip the automatic font loading if you want to handle the font loading manually."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{1}","{1}":!0}),"<Provider skipFontLoading={true}>\n  <View>\n    <Text>Foo</Text>\n  </View>\n</Provider>\n")),Object(a.b)("h3",{id:"using-bare-react-native-without-expo"},"Using Bare React Native (Without Expo)"),Object(a.b)("p",null,"Depending on the version of your React Native, your configuration might be different."),Object(a.b)("p",null,"For ",Object(a.b)("inlineCode",{parentName:"p"},"react-native@>=0.60.0"),", add your fonts directory path to the ",Object(a.b)("inlineCode",{parentName:"p"},"assets")," property to ",Object(a.b)("inlineCode",{parentName:"p"},"react-native.config.js")," in the app root dir."),Object(a.b)("p",null,"E.g.:"),Object(a.b)("p",null,"Your fonts is stored inside ",Object(a.b)("inlineCode",{parentName:"p"},"<ROOT>/assets/fonts/"),"."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Open up ",Object(a.b)("inlineCode",{parentName:"li"},"react-native.config.js"),"."),Object(a.b)("li",{parentName:"ol"},"Add your fonts dir path to ",Object(a.b)("inlineCode",{parentName:"li"},"assets"),".")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js",metastring:"{5}","{5}":!0}),"// react-native.config.js\n\nmodule.exports = {\n  // ...\n  assets: ['./assets/fonts/'],\n};\n")),Object(a.b)("ol",{start:3},Object(a.b)("li",{parentName:"ol"},"Link the assets by running ",Object(a.b)("inlineCode",{parentName:"li"},"react-native link"),".")),Object(a.b)("h2",{id:"using-the-custom-fonts"},"Using the custom fonts"),Object(a.b)("p",null,"Text components use ",Object(a.b)("inlineCode",{parentName:"p"},"preset"),", ",Object(a.b)("inlineCode",{parentName:"p"},"weight"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"fontStyle")," to determine which font source to use."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'// These next two lines are equivalent\n<Text>Foo</Text>\n<Text preset="default" weight="normal" fontStyle="normal">Foo</Text>\n')),Object(a.b)("h3",{id:"preset--weight"},"Preset & Weight"),Object(a.b)("p",null,"By default, exoflex include 2 presets, ",Object(a.b)("inlineCode",{parentName:"p"},"default")," and ",Object(a.b)("inlineCode",{parentName:"p"},"italic"),".\nEach preset only capable of holding 4 font sources.\nEach font source will represent a weight."),Object(a.b)("p",null,"E.g.:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{3-14,32,39,45-46}","{3-14,32,39,45-46}":!0}),'let customTheme = {\n  fonts: {\n    default: {\n      normal: {\n        name: \'OpenSans-Regular\',\n        weight: \'400\',\n        source: OpenSansRegular\n      },\n      bold: {\n        name: \'OpenSans-Bold\',\n        weight: \'700\',\n        source: OpenSansBold\n      }\n    },\n    myPreset: {\n      normal: {\n        name: \'Consolas\',\n        weight: \'400\',\n      },\n      medium: {\n        name: \'FantasqueSansMono-Medium\',\n        weight: \'500\',\n        source: FantasqueSansMonoMedium\n      }\n    }\n  }\n}\n\n<Provider theme={customTheme}>\n  {/* The next two texts will be using the OpenSans font family. */}\n  <Text>Foo</Text>\n  <Text weight="bold">Bar</Text>\n\n  {/* These two will use different font based on the specified preset and weight. */}\n\n  {/* preset "myPreset" -> weight "normal" */}\n  <Text preset="myPreset">Baz</Text>\n  {/* preset "myPreset" -> weight "medium" -> source "FantasqueSansMonoMedium" */}\n  <Text preset="myPreset" weight="medium">Whiz</Text>\n\n  {/*\n    Exoflex component that also display texts will accept "textPreset" prop\n    which works the same like Text.preset\n  */}\n  <Button textPrest="myPreset">PRESS ME</Button>\n  <Calendar textPrest="myPreset" />\n</Provider>\n')),Object(a.b)("h3",{id:"fontstyle"},"FontStyle"),Object(a.b)("p",null,"When ",Object(a.b)("inlineCode",{parentName:"p"},"fontStyle")," is set to ",Object(a.b)("inlineCode",{parentName:"p"},"italic"),", the ",Object(a.b)("inlineCode",{parentName:"p"},"italic")," preset will take precedence over the specified preset."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{2}","{2}":!0}),'// The specified preset in the prop will be ignored.\n<Text preset="somePreset" fontStyle="italic">\n  Foo\n</Text>\n')),Object(a.b)("p",null,"To specify a custom font for the italic text, you need to specify it in the ",Object(a.b)("inlineCode",{parentName:"p"},"italic")," preset inside ",Object(a.b)("inlineCode",{parentName:"p"},"theme.fonts"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx",metastring:"{3-9,25}","{3-9,25}":!0}),'let customTheme = {\n  fonts: {\n    italic: {\n      normal: {\n        name: \'Montserrat-Regular\',\n        weight: \'400\',\n        source: MontserratRegular\n      },\n    },\n    myPreset: {\n      normal: {\n        name: \'Consolas\',\n        weight: \'400\',\n      },\n    }\n  }\n}\n\n<Provider theme={customTheme}>\n  {/*\n    Instead of using the source from "myPreset",\n    this text will use the "italic" preset\n    (fontStyle "italic" -> weight "normal" -> source "MontserratRegular")\n  */}\n  <Text preset="myPreset" fontStyle="italic">Baz</Text>\n</Provider>\n')))}u.isMDXComponent=!0},250:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=o,d=p["".concat(i,".").concat(b)]||p[b]||m[b]||a;return n?r.a.createElement(d,s({ref:t},c,{components:n})):r.a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);