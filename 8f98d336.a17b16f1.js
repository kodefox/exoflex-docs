(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{219:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),r=n(8),i=(n(0),n(250)),o={id:"calendar",title:"Calendar"},l={id:"calendar",title:"Calendar",description:"A component used to show a calendar to pick a date.",source:"@site/docs/calendar.md",permalink:"/exoflex/docs/calendar",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/calendar.md",sidebar:"someSidebar",previous:{title:"Button",permalink:"/exoflex/docs/button"},next:{title:"Card",permalink:"/exoflex/docs/card"}},c=[{value:"Usage",id:"usage",children:[{value:"Basic",id:"basic",children:[]},{value:"Marked Dates",id:"marked-dates",children:[]}]},{value:"Props",id:"props",children:[{value:"textPreset",id:"textpreset",children:[]},{value:"current",id:"current",children:[]},{value:"minDate",id:"mindate",children:[]},{value:"maxDate",id:"maxdate",children:[]},{value:"monthFormat",id:"monthformat",children:[]},{value:"markingType",id:"markingtype",children:[]},{value:"markedDates",id:"markeddates",children:[]},{value:"firstDay",id:"firstday",children:[]},{value:"hideArrows",id:"hidearrows",children:[]},{value:"hideExtraDays",id:"hideextradays",children:[]},{value:"disableMonthChange",id:"disablemonthchange",children:[]},{value:"disabledByDefault",id:"disabledbydefault",children:[]},{value:"hideDayNames",id:"hidedaynames",children:[]},{value:"showWeekNumbers",id:"showweeknumbers",children:[]},{value:"displayLoadingIndicator",id:"displayloadingindicator",children:[]},{value:"dayComponent",id:"daycomponent",children:[]},{value:"renderArrow",id:"renderarrow",children:[]},{value:"style",id:"style",children:[]},{value:"onDayPress",id:"ondaypress",children:[]},{value:"onDayLongPress",id:"ondaylongpress",children:[]},{value:"onMonthChange",id:"onmonthchange",children:[]},{value:"onPressArrowLeft",id:"onpressarrowleft",children:[]},{value:"onPressArrowRight",id:"onpressarrowright",children:[]},{value:"onVisibleMonthsChange",id:"onvisiblemonthschange",children:[]}]},{value:"Internal Props",id:"internal-props",children:[{value:"DateObject",id:"dateobject",children:[]},{value:"Marking",id:"marking",children:[]},{value:"MarkedDateCustomStyles",id:"markeddatecustomstyles",children:[]},{value:"CalendarDot",id:"calendardot",children:[]},{value:"CustomMarking",id:"custommarking",children:[]},{value:"DotMarking",id:"dotmarking",children:[]},{value:"MultiDotMarking",id:"multidotmarking",children:[]},{value:"MultiPeriodMarking",id:"multiperiodmarking",children:[]},{value:"PeriodMarking",id:"periodmarking",children:[]}]}],b={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A component used to show a calendar to pick a date."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"basic"},"Basic"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:"live",live:!0}),"function BasicCalendar() {\n  let [selectedDate, setSelectedDate] = useState(new Date().toISOString());\n\n  let changeDate = (dateObject) => {\n    setSelectedDate(new Date(dateObject.timestamp).toISOString());\n  };\n\n  let arrow = useCallback(\n    (direction) =>\n      direction === 'left' ? (\n        <IconButton icon=\"chevron-left\" />\n      ) : (\n        <IconButton icon=\"chevron-right\" />\n      ),\n    [],\n  );\n\n  return (\n    <Provider>\n      <Calendar\n        markedDates={{ [selectedDate.split('T')[0]]: { selected: true } }}\n        current={new Date(selectedDate)}\n        onDayPress={changeDate}\n        // On web, you have to declare the arrow manually\n        renderArrow={arrow}\n      />\n    </Provider>\n  );\n}\n")),Object(i.b)("h3",{id:"marked-dates"},"Marked Dates"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:"live",live:!0}),"function MarkedCalendar() {\n  const createDate = (increaseDays = 0) => {\n    let date = new Date();\n    let result = date.setDate(date.getDate() + increaseDays);\n    return new Date(result).toISOString().split('T')[0];\n  };\n\n  const MARKED_DATES = {\n    [createDate()]: {\n      selected: true,\n      marked: true,\n    },\n    [createDate(1)]: { marked: true },\n    [createDate(2)]: {\n      marked: true,\n      dotColor: 'red',\n      activeOpacity: 0,\n    },\n    [createDate(3)]: { disabled: true, disableTouchEvent: true },\n  };\n\n  let arrow = useCallback(\n    (direction) =>\n      direction === 'left' ? (\n        <IconButton icon=\"chevron-left\" />\n      ) : (\n        <IconButton icon=\"chevron-right\" />\n      ),\n    [],\n  );\n\n  return (\n    <Calendar\n      // Collection of dates that have to be marked. Default = {}\n      markedDates={MARKED_DATES}\n      renderArrow={arrow}\n    />\n  );\n}\n")),Object(i.b)("h2",{id:"props"},"Props"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"NOTE: You can check this page for more information. ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/wix/react-native-calendars"}),"https://github.com/wix/react-native-calendars"))),Object(i.b)("h3",{id:"textpreset"},"textPreset"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),Object(i.b)("br",{parentName:"p"}),"\n","A preset of font to use when determining the font style."),Object(i.b)("h3",{id:"current"},"current"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," | ",Object(i.b)("inlineCode",{parentName:"p"},"DateObject")," | ",Object(i.b)("inlineCode",{parentName:"p"},"number")," | ",Object(i.b)("inlineCode",{parentName:"p"},"string")," | ",Object(i.b)("inlineCode",{parentName:"p"},"XDate"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"Date"),Object(i.b)("br",{parentName:"p"}),"\n","Initially visible month."),Object(i.b)("h3",{id:"mindate"},"minDate"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),Object(i.b)("br",{parentName:"p"}),"\n","Minimum date that can be selected, dates before minDate will be grayed out."),Object(i.b)("h3",{id:"maxdate"},"maxDate"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),"\nMaximum date that can be selected, dates after maxDate will be grayed out."),Object(i.b)("h3",{id:"monthformat"},"monthFormat"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"'MMMM yyyy'"),Object(i.b)("br",{parentName:"p"}),"\n","Month format in calendar title. Formatting values: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://arshaw.com/xdate/#Formatting"}),"http://arshaw.com/xdate/#Formatting")),Object(i.b)("h3",{id:"markingtype"},"markingType"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"'custom' | 'simple' | 'multi-dot' | 'multi-period' | 'period'"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"'simple'"),Object(i.b)("br",{parentName:"p"}),"\n","Marking style on the date."),Object(i.b)("h3",{id:"markeddates"},"markedDates"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"{ [date: string]: Marking }"),Object(i.b)("br",{parentName:"p"}),"\n","Marking style on the date."),Object(i.b)("h3",{id:"firstday"},"firstDay"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"number"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"0"),Object(i.b)("br",{parentName:"p"}),"\n","If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday."),Object(i.b)("h3",{id:"hidearrows"},"hideArrows"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Hide month navigation arrows."),Object(i.b)("h3",{id:"hideextradays"},"hideExtraDays"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),"\nDefault: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Do not show days of other months in month page."),Object(i.b)("h3",{id:"disablemonthchange"},"disableMonthChange"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out day from another month that is visible in calendar page."),Object(i.b)("h3",{id:"disabledbydefault"},"disabledByDefault"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Disable days by default."),Object(i.b)("h3",{id:"hidedaynames"},"hideDayNames"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Hide day names."),Object(i.b)("h3",{id:"showweeknumbers"},"showWeekNumbers"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Show week numbers to the left."),Object(i.b)("h3",{id:"displayloadingindicator"},"displayLoadingIndicator"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"boolean"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"false"),Object(i.b)("br",{parentName:"p"}),"\n","Display loading indicator."),Object(i.b)("h3",{id:"daycomponent"},"dayComponent"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"React.Component")," | ",Object(i.b)("inlineCode",{parentName:"p"},"React.SFC"),Object(i.b)("br",{parentName:"p"}),"\n","Provide custom day rendering component."),Object(i.b)("h3",{id:"renderarrow"},"renderArrow"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(direction: 'left' | 'right') => JSXElement"),Object(i.b)("br",{parentName:"p"}),"\n","Replace default arrows with custom ones."),Object(i.b)("h3",{id:"style"},"style"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"StyleProp<ViewStyle>"),Object(i.b)("br",{parentName:"p"}),"\n","Calendar container style."),Object(i.b)("h3",{id:"ondaypress"},"onDayPress"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(day: DateObject) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Handler which gets executed on day press."),Object(i.b)("h3",{id:"ondaylongpress"},"onDayLongPress"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(day: DateObject) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Handler which gets executed on day long press."),Object(i.b)("h3",{id:"onmonthchange"},"onMonthChange"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(month: DateObject) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Handler which gets executed when visible month changes in calendar."),Object(i.b)("h3",{id:"onpressarrowleft"},"onPressArrowLeft"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(substractMonth: () => void) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Handler which gets executed when press arrow icon left. It receive a callback that can go back month."),Object(i.b)("h3",{id:"onpressarrowright"},"onPressArrowRight"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(addMonth: () => void) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Handler which gets executed when press arrow icon left. It receive a callback that can go next month."),Object(i.b)("h3",{id:"onvisiblemonthschange"},"onVisibleMonthsChange"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"(months: DateObject[]) => void"),Object(i.b)("br",{parentName:"p"}),"\n","Callback which gets executed when visible months change in scroll view."),Object(i.b)("h2",{id:"internal-props"},"Internal Props"),Object(i.b)("h3",{id:"dateobject"},"DateObject"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"type DateObject = {\n  day: number; // day of month (1-31)\n  month: number; // month of year (1-12)\n  year: number; // year\n  timestamp: number; // UTC timestamp representing 00:00 AM of this date\n  dateString: string; // date formatted as 'YYYY-MM-DD' string\n};\n")),Object(i.b)("h3",{id:"marking"},"Marking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export type Marking =\n  | CustomMarking\n  | DotMarking\n  | MultiDotMarking\n  | MultiPeriodMarking\n  | PeriodMarking;\n")),Object(i.b)("h3",{id:"markeddatecustomstyles"},"MarkedDateCustomStyles"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface MarkedDateCustomStyles {\n  container: StyleProp<ViewStyle>;\n  text: StyleProp<TextStyle>;\n}\n")),Object(i.b)("h3",{id:"calendardot"},"CalendarDot"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface CalendarDot {\n  key: string;\n  color: string;\n  selectedDotColor?: string;\n}\n")),Object(i.b)("h3",{id:"custommarking"},"CustomMarking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface CustomMarking {\n  customStyles: MarkedDateCustomStyles;\n}\n")),Object(i.b)("h3",{id:"dotmarking"},"DotMarking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface DotMarking {\n  activeOpacity?: number;\n  disabled?: boolean;\n  disableTouchEvent?: boolean;\n  dotColor?: string;\n  marked?: boolean;\n  selected?: boolean;\n  selectedColor?: string;\n}\n")),Object(i.b)("h3",{id:"multidotmarking"},"MultiDotMarking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface MultiDotMarking {\n  disabled?: boolean;\n  dots: CalendarDot[];\n  selected?: boolean;\n  selectedColor?: string;\n}\n")),Object(i.b)("h3",{id:"multiperiodmarking"},"MultiPeriodMarking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface MultiPeriodMarking {\n  periods: Array<{\n    startingDay?: boolean;\n    endingDay?: boolean;\n    color?: string;\n  }>;\n}\n")),Object(i.b)("h3",{id:"periodmarking"},"PeriodMarking"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"export interface PeriodMarking {\n  textColor?: string;\n  startingDay?: boolean;\n  color?: string;\n  selected?: boolean;\n  endingDay?: boolean;\n  disabled?: boolean;\n}\n")))}d.isMDXComponent=!0},250:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),d=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=d(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,u=p["".concat(o,".").concat(m)]||p[m]||s[m]||i;return n?r.a.createElement(u,l({ref:t},b,{components:n})):r.a.createElement(u,l({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);